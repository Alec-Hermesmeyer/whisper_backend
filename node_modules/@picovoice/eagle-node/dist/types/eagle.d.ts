import { EagleOptions, EnrollProgress } from './types';
/**
 * Node.js binding for Eagle speaker recognition engine
 *
 * Performs the calls to the Eagle node library. Does some basic parameter validation to prevent
 * errors occurring in the library layer. Provides clearer error messages in native JavaScript.
 */
export declare class EagleProfiler {
    private _pvEagle;
    private _profiler;
    private readonly _version;
    private readonly _sampleRate;
    private readonly _frameLength;
    private readonly _minEnrollSamples;
    /**
     * Creates an instance of Eagle Profiler.
     * @param {string} accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/).
     * @param options Optional configuration arguments.
     * @param {string} options.modelPath the path to the Eagle model (.pv extension)
     * @param {string} options.libraryPath the path to the Eagle library (.node extension)
     */
    constructor(accessKey: string, options?: EagleOptions);
    /**
     * @returns the version of the Eagle engine
     */
    get version(): string;
    /**
     * @returns the audio sampling rate accepted by the enroll function
     * @see {@link enroll}
     */
    get sampleRate(): number;
    /**
     * @returns number of audio samples per frame (i.e. the length of the array provided to the enroll function)
     * @see {@link process}
     */
    get frameLength(): number;
    /**
     * @returns the minimum number of samples required by the enroll function
     * @see {@link enroll}
     */
    get minEnrollSamples(): number;
    /**
     * Enrolls a speaker. This function should be called multiple times with different utterances of the same speaker
     * until `percentage` reaches `100.0`, at which point a speaker voice profile can be exported using `.export()`.
     * Any further enrollment can be used to improve the speaker profile. The minimum length of the input pcm to
     * `.enroll()` can be obtained by calling `.minEnrollSamples`.
     * The audio data used for enrollment should satisfy the following requirements:
     *    - only one speaker should be present in the audio
     *    - the speaker should be speaking in a normal voice
     *    - the audio should contain no speech from other speakers and no other sounds (e.g. music)
     *    - it should be captured in a quiet environment with no background noise
     * @param {Int16Array} pcm Audio data for enrollment. The audio needs to have a sample rate equal to `.sampleRate` and be
     * 16-bit linearly-encoded. EagleProfiler operates on single-channel audio.
     * @return {EnrollProgress} The percentage of completeness of the speaker enrollment process along with the feedback code
     * corresponding to the last enrollment attempt:
     *    - `NONE`: The audio is good for enrollment.
     *    - `AUDIO_TOO_SHORT`: Audio length is insufficient for enrollment,
     *       i.e. it is shorter than`.min_enroll_samples`.
     *    - `UNKNOWN_SPEAKER`: There is another speaker in the audio that is different from the speaker
     *       being enrolled. Too much background noise may cause this error as well.
     *    - `NO_VOICE_FOUND`: The audio does not contain any voice, i.e. it is silent or
     *       has a low signal-to-noise ratio.
     *    - `QUALITY_ISSUE`: The audio quality is too low for enrollment due to a bad microphone
     *       or recording environment.
     */
    enroll(pcm: Int16Array): EnrollProgress;
    /**
     * Exports the speaker profile of the current session.
     * Will throw error if the profile is not ready.
     *
     * @return {Uint8Array} An EagleProfile object.
     */
    export(): Uint8Array;
    /**
     * Resets the internal state of Eagle Profiler.
     * It should be called before starting a new enrollment session.
     */
    reset(): void;
    /**
     * Releases the resources acquired by Eagle.
     *
     * Be sure to call this when finished with the instance
     * to reclaim the memory that was allocated by the C library.
     */
    release(): void;
    private handlePvStatus;
}
export declare class Eagle {
    private _pvEagle;
    private _handle;
    private readonly _version;
    private readonly _sampleRate;
    private readonly _frameLength;
    private readonly _numSpeakers;
    /**
     * Creates an instance of Eagle.
     * @param {string} accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/).
     * @param speakerProfiles One or more Eagle speaker profiles. These can be constructed using `EagleProfiler`.
     * @param options Optional configuration arguments.
     * @param {string} options.modelPath the path to the Eagle model (.pv extension)
     * @param {string} options.libraryPath the path to the Eagle library (.node extension)
     */
    constructor(accessKey: string, speakerProfiles: Uint8Array[] | Uint8Array, options?: EagleOptions);
    /**
     * @returns the version of the Eagle engine
     */
    get version(): string;
    /**
     * @returns the audio sampling rate accepted by the process function
     * @see {@link process}
     */
    get sampleRate(): number;
    /**
     * @returns number of audio samples per frame (i.e. the length of the array provided to the process function)
     * @see {@link process}
     */
    get frameLength(): number;
    /**
     * Processes a frame of audio and returns a list of similarity scores for each speaker profile.
     *
     * @param {Int16Array} pcm A frame of audio samples. The number of samples per frame can be attained by calling
     * `.frameLength`. The incoming audio needs to have a sample rate equal to `.sampleRate` and be 16-bit
     * linearly-encoded. Eagle operates on single-channel audio.
     *
     * @return {number[]} A list of similarity scores for each speaker profile. A higher score indicates that the voice
     * belongs to the corresponding speaker. The range is [0, 1] with 1.0 representing a perfect match.
     */
    process(pcm: Int16Array): number[];
    /**
     * Resets the internal state of the engine.
     * It is best to call before processing a new sequence of audio (e.g. a new voice interaction).
     * This ensures that the accuracy of the engine is not affected by a change in audio context.
     */
    reset(): void;
    /**
     * Releases the resources acquired by Eagle.
     *
     * Be sure to call this when finished with the instance
     * to reclaim the memory that was allocated by the C library.
     */
    release(): void;
    private handlePvStatus;
}
//# sourceMappingURL=eagle.d.ts.map