//
// Copyright 2024 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.EagleActivationRefusedError = exports.EagleActivationThrottledError = exports.EagleActivationLimitReachedError = exports.EagleActivationError = exports.EagleRuntimeError = exports.EagleInvalidStateError = exports.EagleKeyError = exports.EagleStopIterationError = exports.EagleInvalidArgumentError = exports.EagleIOError = exports.EagleOutOfMemoryError = exports.EagleError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class EagleError extends Error {
    _message;
    _messageStack;
    constructor(message, messageStack = []) {
        super(EagleError.errorToString(message, messageStack));
        this._message = message;
        this._messageStack = messageStack;
    }
    get message() {
        return this._message;
    }
    get messageStack() {
        return this._messageStack;
    }
    static errorToString(initial, messageStack) {
        let msg = initial;
        if (messageStack.length > 0) {
            msg += `: ${messageStack.reduce((acc, value, index) => acc + '\n  [' + index + '] ' + value, '')}`;
        }
        return msg;
    }
}
exports.EagleError = EagleError;
class EagleOutOfMemoryError extends EagleError {
}
exports.EagleOutOfMemoryError = EagleOutOfMemoryError;
class EagleIOError extends EagleError {
}
exports.EagleIOError = EagleIOError;
class EagleInvalidArgumentError extends EagleError {
}
exports.EagleInvalidArgumentError = EagleInvalidArgumentError;
class EagleStopIterationError extends EagleError {
}
exports.EagleStopIterationError = EagleStopIterationError;
class EagleKeyError extends EagleError {
}
exports.EagleKeyError = EagleKeyError;
class EagleInvalidStateError extends EagleError {
}
exports.EagleInvalidStateError = EagleInvalidStateError;
class EagleRuntimeError extends EagleError {
}
exports.EagleRuntimeError = EagleRuntimeError;
class EagleActivationError extends EagleError {
}
exports.EagleActivationError = EagleActivationError;
class EagleActivationLimitReachedError extends EagleError {
}
exports.EagleActivationLimitReachedError = EagleActivationLimitReachedError;
class EagleActivationThrottledError extends EagleError {
}
exports.EagleActivationThrottledError = EagleActivationThrottledError;
class EagleActivationRefusedError extends EagleError {
}
exports.EagleActivationRefusedError = EagleActivationRefusedError;
function pvStatusToException(pvStatus, errorMessage, messageStack = []) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new EagleOutOfMemoryError(errorMessage, messageStack);
        case pv_status_t_1.default.IO_ERROR:
            throw new EagleIOError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new EagleInvalidArgumentError(errorMessage, messageStack);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new EagleStopIterationError(errorMessage, messageStack);
        case pv_status_t_1.default.KEY_ERROR:
            throw new EagleKeyError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_STATE:
            throw new EagleInvalidStateError(errorMessage, messageStack);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new EagleRuntimeError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new EagleActivationError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new EagleActivationLimitReachedError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new EagleActivationThrottledError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new EagleActivationRefusedError(errorMessage, messageStack);
        default:
            // eslint-disable-next-line no-console
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new EagleError(errorMessage, messageStack);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map